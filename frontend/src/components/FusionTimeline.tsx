'use client'
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/Card';
import { Progress } from './ui/progress';
import { 
  Gavel, 
  Lock, 
  Eye, 
  Clock, 
  ArrowRight, 
  Shield, 
  Zap, 
  Users,
  Key,
  RefreshCw,
  AlertTriangle,
  CheckCircle2
} from 'lucide-react';

interface TimelinePhase {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  details: string[];
  icon: React.ReactNode;
  color: string;
  status: 'completed' | 'active' | 'pending';
}

const FusionTimeline: React.FC = () => {
  const [activePhase, setActivePhase] = useState<string>('auction');
  const [animationKey, setAnimationKey] = useState(0);

  const phases: TimelinePhase[] = [
    {
      id: 'auction',
      title: 'Order Announcement & Auction',
      subtitle: 'Dutch Auction Mechanism',
      description: 'The user initiates a cross-chain swap by signing a Fusion+ order that specifies the source chain/token and destination chain/token and amount desired.',
      details: [
        'User signs order with hash of secret (random value generated by dApp)',
        'Signed order sent to 1inch backend (relayer service)',
        'Order broadcasted to all resolvers, starting Dutch auction',
        'Resolvers calculate costs and gradually improve their offers',
        'Competitive bidding ensures best price for user'
      ],
      icon: <Gavel className="w-6 h-6" />,
      color: 'from-orange-500 to-yellow-500',
      status: activePhase === 'auction' ? 'active' : 'completed'
    },
    {
      id: 'deposit',
      title: 'Deposit Phase',
      subtitle: 'Hash Time-Locked Contract',
      description: 'The winning resolver deposits the destination token into a Hash Time-Locked Contract (HTLC) on the destination chain, using the hash of the user\'s secret.',
      details: [
        'Resolver wins auction with best offer',
        'Resolver deposits destination tokens into HTLC',
        'Contract locked with user\'s secret hash',
        'Timelock T1 prevents indefinite locking',
        'User has exclusive access with secret knowledge'
      ],
      icon: <Lock className="w-6 h-6" />,
      color: 'from-yellow-500 to-orange-500',
      status: activePhase === 'deposit' ? 'active' : activePhase === 'auction' ? 'pending' : 'completed'
    },
    {
      id: 'withdrawal',
      title: 'Withdrawal Phase',
      subtitle: 'Secret Reveal & Atomic Swap',
      description: 'User withdraws destination tokens by revealing the secret, which simultaneously enables resolver to claim source tokens, completing the atomic swap.',
      details: [
        'User reveals secret to unlock destination tokens',
        'Secret becomes publicly visible on blockchain',
        'Resolver uses revealed secret to claim source tokens',
        'Atomic swap completed trustlessly',
        'Both parties receive their desired tokens'
      ],
      icon: <Eye className="w-6 h-6" />,
      color: 'from-orange-600 to-yellow-400',
      status: activePhase === 'withdrawal' ? 'active' : ['auction', 'deposit'].includes(activePhase) ? 'pending' : 'completed'
    },
    {
      id: 'recovery',
      title: 'Recovery Phase',
      subtitle: 'Timeout & Safety Mechanisms',
      description: 'If the user fails to reveal the secret within timelock T1, resolver can recover their deposit. If resolver fails to deposit within T2, user\'s order expires safely.',
      details: [
        'Timelock T1: User must reveal secret within time limit',
        'Timelock T2: Resolver must deposit within deadline',
        'Automatic recovery mechanisms prevent fund loss',
        'Staggered timeouts incentivize completion',
        'Cryptographic guarantees ensure security'
      ],
      icon: <RefreshCw className="w-6 h-6" />,
      color: 'from-yellow-600 to-orange-600',
      status: activePhase === 'recovery' ? 'active' : 'pending'
    }
  ];

  const handlePhaseClick = (phaseId: string) => {
    setActivePhase(phaseId);
    setAnimationKey(prev => prev + 1);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="w-5 h-5 text-orange-400" />;
      case 'active':
        return <Zap className="w-5 h-5 text-yellow-400 animate-pulse" />;
      default:
        return <Clock className="w-5 h-5 text-neutral-400" />;
    }
  };

  const getProgressValue = () => {
    const phaseIndex = phases.findIndex(p => p.id === activePhase);
    return ((phaseIndex + 1) / phases.length) * 100;
  };

  return (
    <div className="w-full max-w-6xl mx-auto p-4 space-y-8 bg-black">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-3xl md:text-4xl font-black mb-4 bg-gradient-to-r from-orange-400 via-yellow-400 to-orange-400 bg-clip-text text-transparent font-[family-name:var(--font-unbounded)]">
          How Fusion+ Works
        </h2>
        <p className="text-lg text-neutral-300 max-w-3xl mx-auto mb-6 font-[family-name:var(--font-spline-sans-mono)]">
          Revolutionary <span className="text-orange-400 font-semibold">cross-chain swap mechanism</span> combining 
          Dutch auctions with Hash Time-Locked Contracts
        </p>
        
        {/* Progress Bar */}
        <div className="max-w-xl mx-auto mb-8">
          <div className="flex items-center justify-between mb-3">
            <span className="text-xs font-medium text-neutral-400 font-[family-name:var(--font-spline-sans-mono)]">Progress</span>
            <span className="text-xs font-medium text-orange-400 font-[family-name:var(--font-spline-sans-mono)]">
              {Math.round(getProgressValue())}% Complete
            </span>
          </div>
          <Progress value={getProgressValue()} className="h-2" />
        </div>
      </div>

      {/* Timeline Navigation */}
      <div className="grid md:grid-cols-4 gap-3 mb-8">
        {phases.map((phase, index) => (
          <motion.button
            key={phase.id}
            onClick={() => handlePhaseClick(phase.id)}
            className={`p-3 rounded-xl text-left transition-all duration-300 border ${
              activePhase === phase.id
                ? 'bg-gradient-to-r from-orange-900/40 to-yellow-900/40 border-orange-500/50'
                : 'bg-black/60 border-neutral-800/50 hover:border-orange-500/30 hover:bg-orange-900/20'
            }`}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center space-x-2 mb-2">
              <div className={`w-8 h-8 rounded-lg flex items-center justify-center bg-gradient-to-r ${phase.color}`}>
                {phase.icon}
              </div>
              {getStatusIcon(phase.status)}
            </div>
            <h3 className="font-semibold text-white mb-1 text-xs font-[family-name:var(--font-unbounded)]">
              {phase.title}
            </h3>
            <p className="text-xs text-neutral-400 font-[family-name:var(--font-spline-sans-mono)]">
              {phase.subtitle}
            </p>
          </motion.button>
        ))}
      </div>

      {/* Active Phase Details */}
      <AnimatePresence mode="wait">
        {phases.map((phase) => (
          activePhase === phase.id && (
            <motion.div
              key={`${phase.id}-${animationKey}`}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="bg-black/80 border-neutral-800/50">
                <CardHeader>
                  <div className="flex items-center space-x-3 mb-3">
                    <div className={`w-12 h-12 rounded-xl flex items-center justify-center bg-gradient-to-r ${phase.color} text-black`}>
                      <div className="w-6 h-6">
                        {phase.icon}
                      </div>
                    </div>
                    <div>
                      <CardTitle className="text-xl md:text-2xl text-white font-[family-name:var(--font-unbounded)]">
                        {phase.title}
                      </CardTitle>
                      <CardDescription className="text-orange-400 font-semibold text-sm font-[family-name:var(--font-spline-sans-mono)]">
                        {phase.subtitle}
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>

                <CardContent className="space-y-4">
                  <p className="text-base text-neutral-300 leading-relaxed font-[family-name:var(--font-spline-sans-mono)]">
                    {phase.description}
                  </p>

                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-base font-semibold text-white mb-3 font-[family-name:var(--font-unbounded)]">
                        Key Steps
                      </h4>
                      <ul className="space-y-2">
                        {phase.details.slice(0, 3).map((detail, index) => (
                          <motion.li
                            key={index}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.1 }}
                            className="flex items-start space-x-2"
                          >
                            <div className="w-5 h-5 rounded-full bg-gradient-to-r from-orange-500 to-yellow-500 flex items-center justify-center flex-shrink-0 mt-0.5">
                              <span className="text-xs font-bold text-black">{index + 1}</span>
                            </div>
                            <span className="text-neutral-300 text-xs leading-relaxed font-[family-name:var(--font-spline-sans-mono)]">
                              {detail}
                            </span>
                          </motion.li>
                        ))}
                      </ul>
                    </div>

                    <div className="bg-neutral-900/50 rounded-xl p-4 border border-neutral-800/50">
                      <h4 className="text-base font-semibold text-white mb-3 flex items-center font-[family-name:var(--font-unbounded)]">
                        <Shield className="w-4 h-4 mr-2 text-orange-400" />
                        Security
                      </h4>
                      <div className="space-y-2">
                        <div className="flex items-center space-x-2">
                          <CheckCircle2 className="w-3 h-3 text-orange-400" />
                          <span className="text-xs text-neutral-300 font-[family-name:var(--font-spline-sans-mono)]">Cryptographic verification</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <CheckCircle2 className="w-3 h-3 text-orange-400" />
                          <span className="text-xs text-neutral-300 font-[family-name:var(--font-spline-sans-mono)]">Time-locked protection</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <CheckCircle2 className="w-3 h-3 text-orange-400" />
                          <span className="text-xs text-neutral-300 font-[family-name:var(--font-spline-sans-mono)]">Atomic guarantees</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )
        ))}
      </AnimatePresence>

      {/* Navigation Controls */}
      <div className="flex items-center justify-center space-x-3">
        <button
          onClick={() => {
            const currentIndex = phases.findIndex(p => p.id === activePhase);
            if (currentIndex > 0) {
              handlePhaseClick(phases[currentIndex - 1].id);
            }
          }}
          disabled={phases.findIndex(p => p.id === activePhase) === 0}
          className="flex items-center space-x-2 px-4 py-2 bg-black/60 hover:bg-orange-900/30 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg border border-orange-500/30 transition-all duration-300 text-sm font-[family-name:var(--font-unbounded)]"
        >
          <ArrowRight className="w-3 h-3 rotate-180" />
          <span className="text-white">Previous</span>
        </button>
        
        <button
          onClick={() => {
            const currentIndex = phases.findIndex(p => p.id === activePhase);
            if (currentIndex < phases.length - 1) {
              handlePhaseClick(phases[currentIndex + 1].id);
            }
          }}
          disabled={phases.findIndex(p => p.id === activePhase) === phases.length - 1}
          className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-orange-600 to-yellow-600 hover:from-orange-700 hover:to-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg transition-all duration-300 text-sm font-[family-name:var(--font-unbounded)]"
        >
          <span className="text-white">Next</span>
          <ArrowRight className="w-3 h-3" />
        </button>
      </div>
    </div>
  );
};

export default FusionTimeline; 